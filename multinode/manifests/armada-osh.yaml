---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: helm-toolkit
data:
  chart_name: helm-toolkit
  release: helm-toolkit
  namespace: helm-toolkit
  values: {}
  source:
    type: local
    location: ${OSH_INFRA_PATH}
    subpath: helm-toolkit
    reference: master
  dependencies: []
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-ingress-controller
data:
  chart_name: openstack-ingress-controller
  release: openstack-ingress-controller
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-openstack-ingress-controller
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-openstack-ingress-controller
  values:
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      error_server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    pod:
      replicas:
        error_page: 2
        ingress: 2
  source:
    type: local
    location: ${OSH_PATH}
    subpath: ingress
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-ceph-config
data:
  chart_name: openstack-ceph-config
  release: openstack-ceph-config
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-openstack-ceph-config
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-openstack-ceph-config
  values:
    labels:
      jobs:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    endpoints:
      identity:
        namespace: openstack
      object_store:
        namespace: ceph
      ceph_mon:
        namespace: ceph
    network:
      public: ${CEPH_NETWORK}
      cluster: ${CEPH_NETWORK}
    deployment:
      storage_secrets: false
      ceph: false
      rbd_provisioner: false
      cephfs_provisioner: false
      client_secrets: true
      rgw_keystone_user_and_endpoints: false
    bootstrap:
      enabled: false
    conf:
      rgw_ks:
        enabled: true
  source:
    type: local
    location: ${OSH_PATH}
    subpath: ceph-provisioners
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: mariadb
data:
  chart_name: mariadb
  release: mariadb
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-mariadb
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-mariadb
  values:
    monitoring:
      prometheus:
        enabled: True
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_mysql_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: mariadb
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: memcached
data:
  chart_name: memcached
  release: memcached
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-memcached
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-memcached
  values:
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_memcached_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    monitoring:
      prometheus:
        enabled: true
  source:
    type: local
    location: ${OSH_PATH}
    subpath: memcached
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: keystone-rabbitmq
data:
  chart_name: keystone-rabbitmq
  release: keystone-rabbitmq
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-keystone-rabbitmq
  test:
    enabled: false
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-keystone-rabbitmq
        - type: pod
          labels:
            release_group: osh-keystone-rabbitmq
            component: test
  values:
    endpoints:
      oslo_messaging:
        hosts:
          default: keystone-rabbitmq
      prometheus_rabbitmq_exporter:
        hosts:
          default: keystone-rabbitmq-exporter
    monitoring:
      prometheus:
        enabled: True
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_rabbitmq_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: rabbitmq
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: keystone
data:
  chart_name: keystone
  release: keystone
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-keystone
  test:
    enabled: true
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-keystone
        - type: pod
          labels:
            release_group: osh-keystone
            component: test
  values:
    images:
      tags:
        bootstrap: docker.io/srwilkers/heat:ocata
        test: docker.io/kolla/ubuntu-source-rally:4.0.0
        db_init: docker.io/srwilkers/heat:ocata
        keystone_db_sync: docker.io/srwilkers/keystone:ocata
        db_drop: docker.io/srwilkers/heat:ocata
        ks_user: docker.io/srwilkers/heat:ocata
        rabbit_init: docker.io/rabbitmq:3.7-management
        keystone_fernet_setup: docker.io/srwilkers/keystone:ocata
        keystone_fernet_rotate: docker.io/srwilkers/keystone:ocata
        keystone_credential_setup: docker.io/srwilkers/keystone:ocata
        keystone_credential_rotate: docker.io/srwilkers/keystone:ocata
        keystone_api: docker.io/srwilkers/keystone:ocata
        keystone_domain_manage: docker.io/srwilkers/keystone:ocata
        dep_check: quay.io/stackanetes/kubernetes-entrypoint:v0.3.1
        image_repo_sync: docker.io/docker:17.07.0
    conf:
      logging:
        loggers:
          keys:
            - root
            - keystone
        handlers:
          keys:
            - stdout
            - stderr
            - "null"
            - fluent
        formatters:
          keys:
            - context
            - default
            - fluent
        logger_root:
          level: WARNING
          handlers: null
        logger_keystone:
          level: INFO
          handlers: fluent
          qualname: keystone
        logger_amqp:
          level: WARNING
          handlers: stderr
          qualname: amqp
        logger_amqplib:
          level: WARNING
          handlers: stderr
          qualname: amqplib
        logger_eventletwsgi:
          level: WARNING
          handlers: stderr
          qualname: eventlet.wsgi.server
        logger_sqlalchemy:
          level: WARNING
          handlers: stderr
          qualname: sqlalchemy
        logger_boto:
          level: WARNING
          handlers: stderr
          qualname: boto
        handler_null:
          class: logging.NullHandler
          formatter: default
          args: ()
        handler_stdout:
          class: StreamHandler
          args: (sys.stdout,)
          formatter: context
        handler_stderr:
          class: StreamHandler
          args: (sys.stderr,)
          formatter: context
        handler_fluent:
          class: fluent.handler.FluentHandler
          args: ('openstack.keystone', 'fluentd-logging.osh-infra', 24224)
          formatter: fluent
        formatter_fluent:
          class: oslo_log.formatters.FluentFormatter
        formatter_context:
          class: oslo_log.formatters.ContextFormatter
        formatter_default:
          format: "%(message)s"
    endpoints:
      identity:
        name: keystone
        namespace: openstack
      oslo_cache:
        auth:
          memcache_secret_key: ${KEYSTONE_AUTHTOKEN_MEMCACHED_SECRET_KEY}
        hosts:
         default: keystone-rabbitmq
    labels:
      api:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      job:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    pod:
      replicas:
        api: 2
  source:
    type: local
    location: ${OSH_PATH}
    subpath: keystone
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: radosgw-openstack
data:
  chart_name: radosgw-openstack
  release: radosgw-openstack
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-radosgw-openstack
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-radosgw-openstack
  values:
    endpoints:
      identity:
        namespace: openstack
      object_store:
        namespace: ceph
      ceph_mon:
        namespace: ceph
    labels:
      job:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    bootstrap:
      enabled: False
    conf:
      rgw_ks:
        enabled: True
    network:
      public: ${CEPH_NETWORK}
      cluster: ${CEPH_NETWORK}
    deployment:
      storage_secrets: False
      ceph: False
      rbd_provisioner: False
      cephfs_provisioner: False
      client_secrets: False
      rgw_keystone_user_and_endpoints: True
  source:
    type: local
    location: ${OSH_PATH}
    subpath: ceph-client
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: glance-rabbitmq
data:
  chart_name: glance-rabbitmq
  release: glance-rabbitmq
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-glance-rabbitmq
  test:
    enabled: false
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-glance-rabbitmq
        - type: pod
          labels:
            release_group: osh-glance-rabbitmq
            component: test
  values:
    endpoints:
      oslo_messaging:
        hosts:
          default: glance-rabbitmq
      prometheus_rabbitmq_exporter:
        hosts:
          default: glance-rabbitmq-exporter
    monitoring:
      prometheus:
        enabled: True
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_rabbitmq_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: rabbitmq
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: glance
data:
  chart_name: glance
  release: glance
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-glance
  test:
    enabled: true
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-glance
        - type: pod
          labels:
            release_group: osh-glance
            component: test
  values:
    images:
      tags:
        test: docker.io/kolla/ubuntu-source-rally:4.0.0
        glance_storage_init: docker.io/port/ceph-config-helper:v1.10.3
        db_init: docker.io/srwilkers/heat:ocata
        glance_db_sync: docker.io/srwilkers/glance:ocata
        db_drop: docker.io/srwilkers/heat:ocata
        ks_user: docker.io/srwilkers/heat:ocata
        ks_service: docker.io/srwilkers/heat:ocata
        ks_endpoints: docker.io/srwilkers/heat:ocata
        rabbit_init: docker.io/rabbitmq:3.7-management
        glance_api: docker.io/srwilkers/glance:ocata
        glance_registry: docker.io/srwilkers/glance:ocata
        # Bootstrap image requires curl
        bootstrap: docker.io/srwilkers/heat:ocata
        dep_check: quay.io/stackanetes/kubernetes-entrypoint:v0.3.1
        image_repo_sync: docker.io/docker:17.07.0
    conf:
      logging:
        loggers:
          keys:
            - root
            - glance
        handlers:
          keys:
            - stdout
            - stderr
            - "null"
            - fluent
        formatters:
          keys:
            - context
            - default
            - fluent
        logger_root:
          level: WARNING
          handlers: null
        logger_glance:
          level: INFO
          handlers: fluent
          qualname: glance
        logger_amqp:
          level: WARNING
          handlers: stderr
          qualname: amqp
        logger_amqplib:
          level: WARNING
          handlers: stderr
          qualname: amqplib
        logger_eventletwsgi:
          level: WARNING
          handlers: stderr
          qualname: eventlet.wsgi.server
        logger_sqlalchemy:
          level: WARNING
          handlers: stderr
          qualname: sqlalchemy
        logger_boto:
          level: WARNING
          handlers: stderr
          qualname: boto
        handler_null:
          class: logging.NullHandler
          formatter: default
          args: ()
        handler_stdout:
          class: StreamHandler
          args: (sys.stdout,)
          formatter: context
        handler_stderr:
          class: StreamHandler
          args: (sys.stderr,)
          formatter: context
        handler_fluent:
          class: fluent.handler.FluentHandler
          args: ('openstack.glance', 'fluentd-logging.osh-infra', 24224)
          formatter: fluent
        formatter_fluent:
          class: oslo_log.formatters.FluentFormatter
        formatter_context:
          class: oslo_log.formatters.ContextFormatter
        formatter_default:
          format: "%(message)s"
    endpoints:
      oslo_cache:
        auth:
          memcache_secret_key: ${KEYSTONE_AUTHTOKEN_MEMCACHED_SECRET_KEY}
      oslo_messaging:
        hosts:
          default: glance-rabbitmq
    labels:
      api:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      job:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      registry:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    pod:
      replicas:
        api: 2
        registry: 2
  source:
    type: local
    location: ${OSH_PATH}
    subpath: glance
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: cinder-rabbitmq
data:
  chart_name: cinder-rabbitmq
  release: cinder-rabbitmq
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-cinder-rabbitmq
  test:
    enabled: false
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-cinder-rabbitmq
        - type: pod
          labels:
            release_group: osh-cinder-rabbitmq
            component: test
  values:
    endpoints:
      oslo_messaging:
        hosts:
          default: cinder-rabbitmq
      prometheus_rabbitmq_exporter:
        hosts:
          default: cinder-rabbitmq-exporter
    monitoring:
      prometheus:
        enabled: True
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_rabbitmq_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: rabbitmq
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: cinder
data:
  chart_name: cinder
  release: cinder
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-cinder
  test:
    enabled: true
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-cinder
        - type: pod
          labels:
            release_group: osh-cinder
            component: test
  values:
    images:
      tags:
        test: docker.io/kolla/ubuntu-source-rally:4.0.0
        db_init: docker.io/srwilkers/heat:ocata
        cinder_db_sync: docker.io/srwilkers/cinder:ocata
        db_drop: docker.io/srwilkers/heat:ocata
        rabbit_init: docker.io/rabbitmq:3.7-management
        ks_user: docker.io/srwilkers/heat:ocata
        ks_service: docker.io/srwilkers/heat:ocata
        ks_endpoints: docker.io/srwilkers/heat:ocata
        cinder_api: docker.io/srwilkers/cinder:ocata
        bootstrap: docker.io/srwilkers/heat:ocata
        cinder_scheduler: docker.io/srwilkers/cinder:ocata
        cinder_volume: docker.io/srwilkers/cinder:ocata
        cinder_volume_usage_audit: docker.io/srwilkers/cinder:ocata
        cinder_storage_init: docker.io/port/ceph-config-helper:v1.10.3
        cinder_backup: docker.io/srwilkers/cinder:ocata
        cinder_backup_storage_init: docker.io/port/ceph-config-helper:v1.10.3
        dep_check: quay.io/stackanetes/kubernetes-entrypoint:v0.3.1
        image_repo_sync: docker.io/docker:17.07.0
    endpoints:
      oslo_cache:
        auth:
          memcache_secret_key: ${KEYSTONE_AUTHTOKEN_MEMCACHED_SECRET_KEY}
      oslo_messaging:
        hosts:
          default: cinder-rabbitmq
    labels:
      api:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      backup:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      job:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      scheduler:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      volume:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    pod:
      replicas:
        api: 2
        volume: 1
        scheduler: 1
        backup: 1
    conf:
      cinder:
        DEFAULT:
          backup_driver: cinder.backup.drivers.swift
      logging:
        loggers:
          keys:
            - root
            - cinder
        handlers:
          keys:
            - stdout
            - stderr
            - "null"
            - fluent
        formatters:
          keys:
            - context
            - default
            - fluent
        logger_root:
          level: WARNING
          handlers: null
        logger_cinder:
          level: INFO
          handlers: fluent
          qualname: cinder
        logger_amqp:
          level: WARNING
          handlers: stderr
          qualname: amqp
        logger_amqplib:
          level: WARNING
          handlers: stderr
          qualname: amqplib
        logger_eventletwsgi:
          level: WARNING
          handlers: stderr
          qualname: eventlet.wsgi.server
        logger_sqlalchemy:
          level: WARNING
          handlers: stderr
          qualname: sqlalchemy
        logger_boto:
          level: WARNING
          handlers: stderr
          qualname: boto
        handler_null:
          class: logging.NullHandler
          formatter: default
          args: ()
        handler_stdout:
          class: StreamHandler
          args: (sys.stdout,)
          formatter: context
        handler_stderr:
          class: StreamHandler
          args: (sys.stderr,)
          formatter: context
        handler_fluent:
          class: fluent.handler.FluentHandler
          args: ('openstack.cinder', 'fluentd-logging.osh-infra', 24224)
          formatter: fluent
        formatter_fluent:
          class: oslo_log.formatters.FluentFormatter
        formatter_context:
          class: oslo_log.formatters.ContextFormatter
        formatter_default:
          format: "%(message)s"
  source:
    type: local
    location: ${OSH_PATH}
    subpath: cinder
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: openvswitch
data:
  chart_name: openvswitch
  release: openvswitch
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-openvswitch
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-openvswitch
  values:
    labels:
      ovs:
        node_selector_key: openvswitch
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: openvswitch
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: libvirt
data:
  chart_name: libvirt
  release: libvirt
  namespace: openstack
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
  values:
    labels:
      agent:
        libvirt:
          node_selector_key: openstack-compute-node
          node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: libvirt
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: nova-rabbitmq
data:
  chart_name: nova-rabbitmq
  release: nova-rabbitmq
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-nova-rabbitmq
  test:
    enabled: false
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-nova-rabbitmq
        - type: pod
          labels:
            release_group: osh-nova-rabbitmq
            component: test
  values:
    endpoints:
      oslo_messaging:
        hosts:
          default: nova-rabbitmq
      prometheus_rabbitmq_exporter:
        hosts:
          default: nova-rabbitmq-exporter
    monitoring:
      prometheus:
        enabled: True
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_rabbitmq_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: rabbitmq
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: nova
data:
  chart_name: nova
  release: nova
  namespace: openstack
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            application: nova
            component: db-init
        - type: job
          labels:
            application: nova
            component: db-sync
        - type: job
          labels:
            application: nova
            component: ks-user
        - type: job
          labels:
            application: nova
            component: ks-service
        - type: job
          labels:
            application: nova
            component: ks-endpoints
        - type: job
          labels:
            application: placement
            component: ks-user
        - type: job
          labels:
            application: placement
            component: ks-service
        - type: job
          labels:
            application: placement
            component: ks-endpoints
        - type: job
          labels:
            application: nova
            component: cell-setup
  values:
    images:
      tags:
        bootstrap: docker.io/srwilkers/heat:ocata
        db_drop: docker.io/srwilkers/heat:ocata
        db_init: docker.io/srwilkers/heat:ocata
        dep_check: 'quay.io/stackanetes/kubernetes-entrypoint:v0.3.1'
        rabbit_init: docker.io/rabbitmq:3.7-management
        ks_user: docker.io/srwilkers/heat:ocata
        ks_service: docker.io/srwilkers/heat:ocata
        ks_endpoints: docker.io/srwilkers/heat:ocata
        nova_api: docker.io/srwilkers/nova:ocata
        nova_cell_setup: docker.io/srwilkers/nova:ocata
        nova_cell_setup_init: docker.io/srwilkers/heat:ocata
        nova_compute: docker.io/srwilkers/nova:ocata
        nova_compute_ironic: 'docker.io/kolla/ubuntu-source-nova-compute-ironic:3.0.3'
        nova_compute_ssh: docker.io/srwilkers/nova:ocata
        nova_conductor: docker.io/srwilkers/nova:ocata
        nova_consoleauth: docker.io/srwilkers/nova:ocata
        nova_db_sync: docker.io/srwilkers/nova:ocata
        nova_novncproxy: docker.io/srwilkers/nova:ocata
        nova_novncproxy_assets: 'docker.io/kolla/ubuntu-source-nova-novncproxy:3.0.3'
        nova_placement: docker.io/srwilkers/nova:ocata
        nova_scheduler: docker.io/srwilkers/nova:ocata
        nova_service_cleaner: 'docker.io/port/ceph-config-helper:v1.10.3'
        nova_spiceproxy: docker.io/srwilkers/nova:ocata
        nova_spiceproxy_assets: 'docker.io/kolla/ubuntu-source-nova-spicehtml5proxy:3.0.3'
        test: 'docker.io/kolla/ubuntu-source-rally:4.0.0'
        image_repo_sync: docker.io/docker:17.07.0
    endpoints:
      identity:
        name: keystone
      oslo_cache:
        auth:
          memcache_secret_key: ${KEYSTONE_AUTHTOKEN_MEMCACHED_SECRET_KEY}
      oslo_messaging:
        hosts:
          default: nova-rabbitmq
    labels:
      agent:
        compute:
          node_selector_key: openstack-compute-node
          node_selector_value: enabled
        compute_ironic:
          node_selector_key: openstack-compute-node
          node_selector_value: enabled
      api_metadata:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      conductor:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      consoleauth:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      job:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      novncproxy:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      osapi:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      placement:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      scheduler:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      spiceproxy:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      test:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    pod:
      replicas:
        api_metadata: 1
        placement: 2
        osapi: 2
        conductor: 2
        consoleauth: 2
        scheduler: 2
        novncproxy: 1
    conf:
      nova:
        libvirt:
          virt_type: qemu
          cpu_mode: none
      logging:
        loggers:
          keys:
            - root
            - nova
        handlers:
          keys:
            - stdout
            - stderr
            - "null"
            - fluent
        formatters:
          keys:
            - context
            - default
            - fluent
        logger_root:
          level: WARNING
          handlers: null
        logger_nova:
          level: INFO
          handlers: fluent
          qualname: nova
        logger_amqp:
          level: WARNING
          handlers: stderr
          qualname: amqp
        logger_amqplib:
          level: WARNING
          handlers: stderr
          qualname: amqplib
        logger_eventletwsgi:
          level: WARNING
          handlers: stderr
          qualname: eventlet.wsgi.server
        logger_sqlalchemy:
          level: WARNING
          handlers: stderr
          qualname: sqlalchemy
        logger_boto:
          level: WARNING
          handlers: stderr
          qualname: boto
        handler_null:
          class: logging.NullHandler
          formatter: default
          args: ()
        handler_stdout:
          class: StreamHandler
          args: (sys.stdout,)
          formatter: context
        handler_stderr:
          class: StreamHandler
          args: (sys.stderr,)
          formatter: context
        handler_fluent:
          class: fluent.handler.FluentHandler
          args: ('openstack.nova', 'fluentd-logging.osh-infra', 24224)
          formatter: fluent
        formatter_fluent:
          class: oslo_log.formatters.FluentFormatter
        formatter_context:
          class: oslo_log.formatters.ContextFormatter
        formatter_default:
          format: "%(message)s"
  source:
    type: local
    location: ${OSH_PATH}
    subpath: nova
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: neutron-rabbitmq
data:
  chart_name: neutron-rabbitmq
  release: neutron-rabbitmq
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-neutron-rabbitmq
  test:
    enabled: false
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-neutron-rabbitmq
        - type: pod
          labels:
            release_group: osh-neutron-rabbitmq
            component: test
  values:
    endpoints:
      oslo_messaging:
        hosts:
          default: neutron-rabbitmq
      prometheus_rabbitmq_exporter:
        hosts:
          default: neutron-rabbitmq-exporter
    monitoring:
      prometheus:
        enabled: True
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_rabbitmq_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: rabbitmq
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: neutron
data:
  chart_name: neutron
  release: neutron
  namespace: openstack
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            application: neutron
            component: db-init
        - type: job
          labels:
            application: neutron
            component: db-sync
        - type: job
          labels:
            application: neutron
            component: ks-user
        - type: job
          labels:
            application: neutron
            component: ks-service
        - type: job
          labels:
            application: neutron
            component: ks-endpoints
  values:
    images:
      tags:
        bootstrap: docker.io/srwilkers/heat:ocata
        test: docker.io/kolla/ubuntu-source-rally:4.0.0
        db_init: docker.io/srwilkers/heat:ocata
        neutron_db_sync: docker.io/srwilkers/neutron:ocata
        db_drop: docker.io/srwilkers/heat:ocata
        rabbit_init: docker.io/rabbitmq:3.7-management
        ks_user: docker.io/srwilkers/heat:ocata
        ks_service: docker.io/srwilkers/heat:ocata
        ks_endpoints: docker.io/srwilkers/heat:ocata
        neutron_server: docker.io/srwilkers/neutron:ocata
        neutron_dhcp: docker.io/srwilkers/neutron:ocata
        neutron_metadata: docker.io/srwilkers/neutron:ocata
        neutron_l3: docker.io/srwilkers/neutron:ocata
        neutron_openvswitch_agent: docker.io/srwilkers/neutron:ocata
        neutron_linuxbridge_agent: docker.io/srwilkers/neutron:ocata
        neutron_sriov_agent: docker.io/srwilkers/neutron:newton-sriov-1804
        neutron_sriov_agent_init: docker.io/srwilkers/neutron:newton-sriov-1804
        dep_check: quay.io/stackanetes/kubernetes-entrypoint:v0.3.1
        image_repo_sync: docker.io/docker:17.07.0
    endpoints:
      oslo_cache:
        auth:
          memcache_secret_key: ${KEYSTONE_AUTHTOKEN_MEMCACHED_SECRET_KEY}
      oslo_messaging:
        hosts:
          default: neutron-rabbitmq
    pod:
      replicas:
        server: 2
    labels:
      agent:
        dhcp:
          node_selector_key: openstack-control-plane
          node_selector_value: enabled
        l3:
          node_selector_key: openstack-control-plane
          node_selector_value: enabled
        metadata:
          node_selector_key: openstack-control-plane
          node_selector_value: enabled
      job:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      lb:
        node_selector_key: linuxbridge
        node_selector_value: enabled
      # ovs is a special case, requiring a special
      # label that can apply to both control hosts
      # and compute hosts, until we get more sophisticated
      # with our daemonset scheduling
      ovs:
        node_selector_key: openvswitch
        node_selector_value: enabled
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      test:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    network:
      interface:
        tunnel: ${TUNNEL_DEVICE}
    conf:
      logging:
        loggers:
          keys:
            - root
            - neutron
        handlers:
          keys:
            - stdout
            - stderr
            - "null"
            - fluent
        formatters:
          keys:
            - context
            - default
            - fluent
        logger_root:
          level: WARNING
          handlers: null
        logger_neutron:
          level: INFO
          handlers: fluent
          qualname: neutron
        logger_amqp:
          level: WARNING
          handlers: stderr
          qualname: amqp
        logger_amqplib:
          level: WARNING
          handlers: stderr
          qualname: amqplib
        logger_eventletwsgi:
          level: WARNING
          handlers: stderr
          qualname: eventlet.wsgi.server
        logger_sqlalchemy:
          level: WARNING
          handlers: stderr
          qualname: sqlalchemy
        logger_boto:
          level: WARNING
          handlers: stderr
          qualname: boto
        handler_null:
          class: logging.NullHandler
          formatter: default
          args: ()
        handler_stdout:
          class: StreamHandler
          args: (sys.stdout,)
          formatter: context
        handler_stderr:
          class: StreamHandler
          args: (sys.stderr,)
          formatter: context
        handler_fluent:
          class: fluent.handler.FluentHandler
          args: ('openstack.neutron', 'fluentd-logging.osh-infra', 24224)
          formatter: fluent
        formatter_fluent:
          class: oslo_log.formatters.FluentFormatter
        formatter_context:
          class: oslo_log.formatters.ContextFormatter
        formatter_default:
          format: "%(message)s"
      neutron:
        DEFAULT:
          l3_ha: True
          min_l3_agents_per_router: 2
          max_l3_agents_per_router: 5
          l3_ha_network_type: vxlan
          dhcp_agents_per_network: 2
      plugins:
        ml2_conf:
          ml2_type_flat:
            flat_networks: public
        openvswitch_agent:
          agent:
            tunnel_types: vxlan
          ovs:
            bridge_mappings: public:br-ex
  source:
    type: local
    location: ${OSH_PATH}
    subpath: neutron
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: heat-rabbitmq
data:
  chart_name: heat-rabbitmq
  release: heat-rabbitmq
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-heat-rabbitmq
  test:
    enabled: false
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-heat-rabbitmq
        - type: pod
          labels:
            release_group: osh-heat-rabbitmq
            component: test
  values:
    endpoints:
      oslo_messaging:
        hosts:
          default: heat-rabbitmq
      prometheus_rabbitmq_exporter:
        hosts:
          default: heat-rabbitmq-exporter
    monitoring:
      prometheus:
        enabled: True
    labels:
      server:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      prometheus_rabbitmq_exporter:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
  source:
    type: local
    location: ${OSH_PATH}
    subpath: rabbitmq
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: heat
data:
  chart_name: heat
  release: heat
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-heat
  test:
    enabled: true
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-heat
        - type: pod
          labels:
            release_group: osh-heat
            component: test
  values:
    images:
      tags:
        test: docker.io/kolla/ubuntu-source-rally:4.0.0
        bootstrap: docker.io/srwilkers/heat:ocata
        db_init: docker.io/srwilkers/heat:ocata
        heat_db_sync: docker.io/srwilkers/heat:ocata
        db_drop: docker.io/srwilkers/heat:ocata
        rabbit_init: docker.io/rabbitmq:3.7-management
        ks_user: docker.io/srwilkers/heat:ocata
        ks_service: docker.io/srwilkers/heat:ocata
        ks_endpoints: docker.io/srwilkers/heat:ocata
        heat_api: docker.io/srwilkers/heat:ocata
        heat_cfn: docker.io/srwilkers/heat:ocata
        heat_cloudwatch: docker.io/srwilkers/heat:ocata
        heat_engine: docker.io/srwilkers/heat:ocata
        heat_engine_cleaner: docker.io/srwilkers/heat:ocata
        dep_check: quay.io/stackanetes/kubernetes-entrypoint:v0.3.1
        image_repo_sync: docker.io/docker:17.07.0
    conf:
      logging:
        loggers:
          keys:
            - root
            - heat
        handlers:
          keys:
            - stdout
            - stderr
            - "null"
            - fluent
        formatters:
          keys:
            - context
            - default
            - fluent
        logger_root:
          level: WARNING
          handlers: null
        logger_heat:
          level: INFO
          handlers: fluent
          qualname: heat
        logger_amqp:
          level: WARNING
          handlers: stderr
          qualname: amqp
        logger_amqplib:
          level: WARNING
          handlers: stderr
          qualname: amqplib
        logger_eventletwsgi:
          level: WARNING
          handlers: stderr
          qualname: eventlet.wsgi.server
        logger_sqlalchemy:
          level: WARNING
          handlers: stderr
          qualname: sqlalchemy
        logger_boto:
          level: WARNING
          handlers: stderr
          qualname: boto
        handler_null:
          class: logging.NullHandler
          formatter: default
          args: ()
        handler_stdout:
          class: StreamHandler
          args: (sys.stdout,)
          formatter: context
        handler_stderr:
          class: StreamHandler
          args: (sys.stderr,)
          formatter: context
        handler_fluent:
          class: fluent.handler.FluentHandler
          args: ('openstack.heat', 'fluentd-logging.osh-infra', 24224)
          formatter: fluent
        formatter_fluent:
          class: oslo_log.formatters.FluentFormatter
        formatter_context:
          class: oslo_log.formatters.ContextFormatter
        formatter_default:
          format: "%(message)s"
    endpoints:
      oslo_cache:
        hosts:
          default: heat-memcached
      oslo_messaging:
        hosts:
          default: heat-rabbitmq
    labels:
      api:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      cfn:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      cloudwatch:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      engine:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
      job:
        node_selector_key: openstack-control-plane
        node_selector_value: enabled
    pod:
      replicas:
        api: 2
        cfn: 2
        cloudwatch: 2
        engine: 2
  source:
    type: local
    location: ${OSH_PATH}
    subpath: heat
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: prometheus-openstack-exporter
data:
  chart_name: prometheus-openstack-exporter
  release: prometheus-openstack-exporter
  namespace: openstack
  wait:
    timeout: 1800
    labels:
      release_group: osh-prometheus-openstack-exporter
  install:
    no_hooks: False
  upgrade:
    no_hooks: False
    pre:
      delete:
        - type: job
          labels:
            release_group: osh-prometheus-openstack-exporter
  values:
    labels:
      node_selector_key: openstack-control-plane
      node_selector_value: enabled
  source:
    type: local
    location: ${OSH_INFRA_PATH}
    subpath: prometheus-openstack-exporter
    reference: master
  dependencies:
    - helm-toolkit
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-ingress-controller
data:
  description: "OpenStack Ingress Controller"
  sequenced: False
  chart_group:
    - openstack-ingress-controller
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-ceph-config
data:
  description: "OpenStack Ceph Config"
  sequenced: True
  chart_group:
    - openstack-ceph-config
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: deploy-mariadb
data:
  description: "Mariadb"
  sequenced: True
  chart_group:
    - mariadb
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: deploy-memcached
data:
  description: "Memcached"
  sequenced: True
  chart_group:
    - memcached
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-keystone
data:
  description: "Deploy keystone"
  sequenced: True
  chart_group:
    - keystone-rabbitmq
    - keystone
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-glance
data:
  description: "Deploy glance"
  sequenced: True
  chart_group:
    - glance-rabbitmq
    - glance
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-radosgw
data:
  description: "Deploy rados gateway"
  sequenced: False
  chart_group:
    - radosgw-openstack
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-cinder
data:
  description: "Deploy cinder"
  sequenced: True
  chart_group:
    - cinder-rabbitmq
    - cinder
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-compute-kit
data:
  description: "Deploy nova and neutron, as well as supporting services"
  sequenced: False
  chart_group:
    - libvirt
    - openvswitch
    - nova-rabbitmq
    - nova
    - neutron-rabbitmq
    - neutron
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-heat
data:
  description: "Deploy heat"
  sequenced: True
  chart_group:
    - heat-rabbitmq
    - heat
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: prometheus-openstack-exporter
data:
  description: 'Deploy Prometheus OpenStack exporter'
  sequenced: False
  chart_group:
    - prometheus-openstack-exporter
---
schema: armada/Manifest/v1
metadata:
  schema: metadata/Document/v1
  name: armada-manifest
data:
  release_prefix: osh
  chart_groups:
    - openstack-ingress-controller
    - openstack-ceph-config
    - deploy-mariadb
    - deploy-memcached
    - openstack-keystone
    - openstack-radosgw
    - openstack-glance
    - openstack-cinder
    - openstack-compute-kit
    - openstack-heat
    - prometheus-openstack-exporter
